#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

int CompatilibilityOfOperations(int argc, char* argv[]);
int PasswordGeneration(int argc, char* argv[]);
void OptionMenu();


int main(int argc, char* argv[]) {
    char* option = (char*)malloc(sizeof(char) * (argc - 1));
    for (int i = 1; i < argc; i = i + 1){ char* option = argv[i];}
	if (argc <= 1) { printf_s("Please,enter the value of the operation"); }
	OptionMenu();
    CompatilibilityOfPoerations(argc,argv);
}
int CompatilibilityOfPoerations(int argc, char* argv[]) {
    system("cls");
        int m1_quanity = 0;
        int m2_quanity = 0;
        int n_quanity = 0;
        int c_quanity = 0;
        int a_quanity = 0;
        int C_quanity = 0;

        for (int i = 1; i < argc; i++) { if (strcmp(argv[i], "-m1") == 0) {m1_quanity = m1_quanity + 1;}
            else if (strcmp(argv[i], "-m2") == 0) {m2_quanity = m2_quanity + 1;}
            else if (strcmp(argv[i], "-n") == 0) {n_quanity = n_quanity + 1;}
            else if (strcmp(argv[i], "-c") == 0) {c_quanity = c_quanity + 1;}
            else if (strcmp(argv[i], "-a") == 0) {a_quanity = a_quanity + 1;}
            else if (strcmp(argv[i], "-C") == 0) {C_quanity = C_quanity + 1;}}

        if (m1_quanity > 1 || m2_quanity > 1 || n_quanity > 1 || c_quanity > 1 || a_quanity > 1 || C_quanity > 1) {printf_s("ERROR:the same function should not be repeated\n");
            return 0;}
        if (m1_quanity > 0 && m2_quanity == 0) {printf_s("ERROR:if the minimum length is entered, the maximum length must be entered\n");
            return 0;}
        if (m2_quanity > 0 && m1_quanity == 0) {printf_s("ERROR:if the maximum length is entered, the minimum length must be entered\n");
            return 0;}
        if (a_quanity > 0 && C_quanity > 0) {printf_s("ERROR: options -a and -C cannot be used together\n");
            return 0;}
        return 1;}

int PasswordGeneration(int argc, char* argv[]) {
    for (int i = 0; i < length; i++)            
        if (random < 10) {
            password[i] = random + '0';
        }            
        else if (random < 36) {
            password[i] = random - 10 + 'A';
        }            
        else {
            password[i] = random - 36 + 'a';
        }
    }
}



void OptionMenu() {
	printf_s(" - m1	min lengh password\n"
		"- m2 max lengh password\n"
		"- n  lengh password\n"
		"- c  count password\n"
		"- a  alphabet of symbols\n"
		"- C[aADS]	symbols set\n");
}
