#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include "alphabet.h"

int OptionMenu();
int CompatilibilityOfOperations(int argc, char* argv[]);
int LenghtPassword(int argc, char* argv[]);
int SetAlphabet(int argc, char* argv[]);
int WriteAlhabet();
int QuanityPassword();
char** GenerationFunction(char* AlphabetBig, char* AlphabetLitlle, int* numbers, char* SpesialSymbols);

int LenghtPassword(int argc, char* argv[]) {
    int m1 = 0;
    int m2 = 0;
    int MinLengh = 0;
    int MaxLengh = 0;

    for (int i = 0; i < argc - 1; i = i + 1) {
        if (strcmp(argv[i], "-m1") == 0) {
            m1 = i;
        }
        if (strcmp(argv[i], "-m2") == 0) {
            m2 = i;
        }
    }

    MinLengh = atoi(argv[m1 + 1]);
    MaxLengh = atoi(argv[m2 + 1]);

    if (MaxLengh < MinLengh) {
        printf_s("ERROR:max lengh should not be less than min");
        return 0;
    }

    if (MinLengh == 0 || MaxLengh == 0) {
        printf_s("ERROR:please,enter a lengh");
        return 0;
    }
    return 0;
}

int OptionMenu() {
    printf_s("===========================\n"
        "-m1 min lengh password\n"
        "-m2 max lengh password\n"
        "-n lengh password\n"
        "-c count password\n"
        "-a alphabet of symbols\n"
        "-C[aADS] symbols set\n"
        "===========================\n");
    return 0;
}

int SetAlphabet(int argc,char* argv[]) {
    char** argument = argv + 1;
    int A_quanity = 0;
    int D_quanity = 0;
    int S_quanity = 0;
    int a_symbols_quanity = 0;
    int C_quanity = 0; 
    int C = 0;
    for (int i = 0; i < argc - 1; i = i + 1) {
        if (strcmp(argument[i], "-C") == 0) {
            C = i;
        }
    }
    if (C + 2 == " ") {
        printf_s("ERROR:please,enter some symbol");
    }

    char* option = argument[C + 1];
    int len = strlen(option);
    char* OptionAlphabet = (char*)malloc(len * (sizeof(char)));
    for (int i = 0; i < len; i = i + 1) {
        OptionAlphabet[i] = 0;
    }
    for (int i = 0; i < len; i = i + 1) {
        OptionAlphabet[i] = option[i];
        if (OptionAlphabet[i]=='A') { A_quanity = A_quanity + 1; }
        else if (OptionAlphabet[i]=='D') { D_quanity = D_quanity + 1; }
        else if (OptionAlphabet[i]=='S') { S_quanity = S_quanity + 1; }
        else if (OptionAlphabet[i]=='a') { a_symbols_quanity = a_symbols_quanity + 1; }
        else if (OptionAlphabet[i]=='-C') { C_quanity = C_quanity + 1; }
    }
    /*a - маленькие латинские символы, A - большие латинские символы, D - цифры, S - спецсимволы.*/
    if (A_quanity > 1 || D_quanity > 1 || S_quanity > 1 || a_symbols_quanity > 1) {
        printf_s("ERROR:the same option should not be repeated\n");
        return 0;
    }
    return 0;
}
//int WriteAlhabet() {}
//
//int QuanityPassword() {}
//

int main(int argc, char* argv[]) {
    char* option = (char*)malloc(sizeof(char) * (argc - 1));
    for (int i = 1; i < argc; i = i + 1) { char* option = argv[i]; }
    if (argc <= 1) { printf_s("Please,enter the value of the operation"); }
    CompatilibilityOfPoerations(argc, argv);
    OptionMenu();
    SetAlphabet(argc,argv);
    LenghtPassword(argc, argv);
}

int CompatilibilityOfPoerations(int argc, char* argv[]) {
    int m1_quanity = 0;
    int m2_quanity = 0;
    int n_quanity = 0;
    int c_quanity = 0;
    int a_option_quanity = 0;
    int C_quanity = 0;

    for (int i = 1; i < argc; i++) {
        if (strcmp(argv[i], "-m1") == 0) { m1_quanity = m1_quanity + 1; }
        else if (strcmp(argv[i], "-m2") == 0) { m2_quanity = m2_quanity + 1; }
        else if (strcmp(argv[i], "-n") == 0) { n_quanity = n_quanity + 1; }
        else if (strcmp(argv[i], "-c") == 0) { c_quanity = c_quanity + 1; }
        else if (strcmp(argv[i], "-a") == 0) { a_option_quanity = a_option_quanity + 1; }
        else if (strcmp(argv[i], "-C") == 0) { C_quanity = C_quanity + 1; }
    }

    if (m1_quanity > 1 || m2_quanity > 1 || n_quanity > 1 || c_quanity > 1 || a_option_quanity > 1 || C_quanity > 1) {
        printf_s("ERROR:the same function should not be repeated\n");
        return 0;
    }
    if (m1_quanity > 0 && m2_quanity == 0) {
        printf_s("ERROR:if the minimum length is entered, the maximum length must be entered\n");
        return 0;
    }
    if (m2_quanity > 0 && m1_quanity == 0) {
        printf_s("ERROR:if the maximum length is entered, the minimum length must be entered\n");
        return 0;
    }
    if (a_option_quanity > 0 && C_quanity > 0) {
        printf_s("ERROR: options -a and -C cannot be used together\n");
        return 0;
    }
    return 0;
}

//char** GenerationFunction(char* AlphabetBig, char* AlphabetLitlle, int* numbers, char* SpesialSymbols) {
//    char AlphabetBig[26];
//    char AlphabetLitlle[26];
//    int numbers[9];
//    char SpesialSymbols[27];
//
//}

